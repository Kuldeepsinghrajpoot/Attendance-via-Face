generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Subject {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  subjectName          String
  branch               Branch?             @relation(fields: [branchId], references: [id])
  branchId             String?             @db.ObjectId
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  teacher              Roles?              @relation(fields: [teacherId], references: [id])
  teacherId            String?             @db.ObjectId
  Enroll               Enroll[]
  // schedule        ScheduleAttendance? @relation(fields: [scheduleId], references: [id])
  // scheduleId           String?             @unique @db.ObjectId
  attendances          Attendance[] // Link to daily attendance records
  ScheduleSubject      ScheduleSubject[]
  ScheduleAttendance   ScheduleAttendance? @relation(fields: [scheduleAttendanceId], references: [id])
  scheduleAttendanceId String?             @db.ObjectId
  TeacherSubject       TeacherSubject[]
}

model Roles {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  email          String           @unique
  password       String
  role           RoleType
  firstName      String
  lastName       String?
  phone          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  branch         Branch?          @relation(fields: [branchId], references: [id])
  branchId       String?          @db.ObjectId
  Subject        Subject[]
  TeacherSubject TeacherSubject[]
}

model TeacherSubject {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  teacher              Roles               @relation(fields: [teacherId], references: [id])
  teacherId            String              @db.ObjectId
  subject              Subject             @relation(fields: [subjectId], references: [id])
  subjectId            String              @db.ObjectId
  // New relation to schedule attendance for this teacher's assignment to the subject.
  scheduleAttendanceId String?             @db.ObjectId
  scheduleAttendance   ScheduleAttendance? @relation(fields: [scheduleAttendanceId], references: [id])
  assignedAt           DateTime            @default(now())
  Enroll               Enroll[]
}

model TeacherScheduleAttendance {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  teacherId  String   @db.ObjectId
  subjectId  String   @db.ObjectId
  scheduleId String   @db.ObjectId
  // Optionally, add timestamps, session info, etc.
  createdAt  DateTime @default(now())
}

model Batch {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  batch     String    @unique
  Enroll    Enroll[]
  students  Student[] @relation("StudentToBatch")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Branch {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  subjects   Subject[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  branchName String    @unique
  Roles      Roles[]
  students   Student[] @relation("StudentToBranch")
}

model Student {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  email      String       @unique
  Firstname  String
  lastname   String
  avatar     String
  password   String
  rollNumber String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  role       RoleType
  phone      String?
  branch     Branch       @relation(fields: [branchId], references: [id], name: "StudentToBranch")
  branchId   String       @db.ObjectId
  batch      Batch        @relation(fields: [batchId], references: [id], name: "StudentToBatch")
  batchId    String       @db.ObjectId
  Enroll     Enroll[]
  Attendance Attendance[]

  @@index([rollNumber])
  @@index([phone])
}

model Enroll {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  student          Student         @relation(fields: [studentId], references: [id])
  studentId        String          @db.ObjectId
  subject          Subject         @relation(fields: [subjectId], references: [id])
  subjectId        String          @db.ObjectId
  batch            Batch           @relation(fields: [batchId], references: [id])
  batchId          String          @db.ObjectId
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  session          String
  year             String
  teacherSubjectId String?         @db.ObjectId
  teacherSubject   TeacherSubject? @relation(fields: [teacherSubjectId], references: [id])
}

model ScheduleAttendance {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  startTime       DateTime?
  endTime         DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ScheduleSubject ScheduleSubject[]
  Subject         Subject[]
  Attendance      Attendance[]
  TeacherSubject  TeacherSubject[]
}

model ScheduleSubject {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  schedule   ScheduleAttendance @relation(fields: [scheduleId], references: [id])
  scheduleId String             @db.ObjectId
  subject    Subject            @relation(fields: [subjectId], references: [id])
  subjectId  String             @db.ObjectId
}

model Attendance {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  student            Student             @relation(fields: [studentId], references: [id])
  studentId          String              @db.ObjectId
  subject            Subject             @relation(fields: [subjectId], references: [id])
  subjectId          String              @db.ObjectId
  scheduleAttendance ScheduleAttendance? @relation(fields: [scheduleId], references: [id])
  scheduleId         String?             @db.ObjectId
  status             AttendanceValue
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

enum RoleType {
  ADMIN
  TEACHER
  STUDENT
}

enum AttendanceValue {
  PRESENT
  ABSENT
  LATE
  EXCUSED
  NOT_MARKED
}
