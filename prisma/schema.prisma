generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Student {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  email       String       @unique
  Firstname   String
  lastname    String
  avatar      String       @unique
  password    String
  rollNumber  String
  attendances Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  role        RoleType
}

//  this method of linking the method of attendace of students
model Attendance {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  student         Student  @relation(fields: [studentId], references: [id])
  studentId       String   @db.ObjectId
  attendancevalue String
}

model Branch {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  subjectName String
  Subject     Subject[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Subject {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  subjectName String
  Branch      Branch   @relation(fields: [BranchId], references: [id])
  BranchId    String   @db.ObjectId // Define field name explicitly
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Teacher     Roles?    @relation(fields: [teacherId], references: [id])
  teacherId   String?  @db.ObjectId
}

enum RoleType {
  ADMIN
  TEACHER
  STUDENT
}

enum AttendanceValue {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

model Roles {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  email     String    @unique
  password  String
  role      RoleType
  subject   Subject[]
  subjectId String?  
  firstName String
  lastName  String?
  phone     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}
